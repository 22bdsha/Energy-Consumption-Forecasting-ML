# -*- coding: utf-8 -*-
"""Energy_Consumption_Forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12_yw-_rt9gmXAQQsxkWBwHbGmak8TeJE
"""

import pandas as pd
import numpy as np

# Parameters
np.random.seed(42)

# Generate timestamps spanning 2020-2024
samples_per_month = 25  # Samples from each month
years = range(2020, 2025)
months = range(1, 13)
timestamps = []

for year in years:
    for month in months:
        # Get number of days in this month
        if month == 2:
            days_in_month = 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28
        elif month in [4, 6, 9, 11]:
            days_in_month = 30
        else:
            days_in_month = 31

        # Random days and hours for this month
        days = np.random.choice(range(1, days_in_month+1), size=samples_per_month)
        hours = np.random.choice(range(24), size=samples_per_month)

        for day, hour in zip(days, hours):
            timestamps.append(pd.Timestamp(year=year, month=month, day=int(day), hour=int(hour)))

timestamps.sort()  # Sort chronologically
data = pd.DataFrame(timestamps, columns=['Timestamp'])

# Machine Hours (0-24 hours with realistic distribution)
prob_dist = [0.1] + [0.0375]*24  # Higher probability of 0 hours (idle time)
prob_dist = np.array(prob_dist)/sum(prob_dist)  # Normalize
data['Machine_Hours'] = np.random.choice(range(25), size=len(data), p=prob_dist)

# Material Processed (tons) - correlated with machine hours
data['Material_Processed_tons'] = (data['Machine_Hours'] * 4.2  # 4.2 tons/hour
                                  + np.random.normal(0, 10, len(data))
                                 ).clip(lower=0).round(1)

# Environmental Factors - with seasonal patterns
hours = data['Timestamp'].dt.hour
months = data['Timestamp'].dt.month
data['Temperature_C'] = (25 + 10*np.sin(2*np.pi*(months-1)/12)  # Seasonal component
                       + 5*np.sin(2*np.pi*hours/24)  # Daily component
                       + np.random.normal(0, 3, len(data))).round(1)
data['Humidity_%'] = (60 - 10*np.sin(2*np.pi*(months-1)/12)  # Seasonal component
                    - 10*np.sin(2*np.pi*hours/24)  # Daily component
                    + np.random.normal(0, 10, len(data))).clip(0,100).round(1)

# Time of Day (Shifts)
data['Shift'] = pd.cut(hours, bins=[-1,7,15,23], labels=['Night','Morning','Evening'])

# Machine Type Distribution
machine_types = ['Excavator', 'Hauler', 'Crusher']
data['Machine_Type'] = np.random.choice(machine_types, size=len(data), p=[0.5,0.3,0.2])

# Energy Consumption Calculation
energy_base = (data['Machine_Hours'] * 150  # 150 kWh/hour base consumption
             + data['Material_Processed_tons'] * 2.5  # 2.5 kWh/ton
             - data['Temperature_C'] * 0.8  # Cooling effect
             + np.random.normal(0, 50, len(data))
             ).clip(lower=0)

# Machine type multipliers
type_factors = {'Excavator':1.1, 'Hauler':1.3, 'Crusher':1.8}
data['Energy_Consumption_kWh'] = energy_base * data['Machine_Type'].map(type_factors)

# Save to CSV
data[['Timestamp', 'Machine_Hours', 'Material_Processed_tons',
     'Temperature_C', 'Humidity_%', 'Shift', 'Machine_Type',
     'Energy_Consumption_kWh']].to_csv('mining_energy_dataset_multi_year.csv', index=False)

df = pd.read_csv("mining_energy_dataset_multi_year.csv")

df.head(50)

print("SUMMARY STATISTICS")
df.describe()

df.columns

print("DATASET INFO :")
df.info()

df.columns

"""**EDA (EXPLORATORY DATA ANALYSIS)**


"""

import matplotlib.pyplot as plt
import seaborn as sns


num_cols = ['Machine_Hours', 'Material_Processed_tons', 'Temperature_C', 'Humidity_%', 'Energy_Consumption_kWh']
plt.figure(figsize=(15,10))
for i, col in enumerate(num_cols, 1):
    plt.subplot(3, 2, i)
    sns.histplot(df[col], kde=True, color="skyblue")
    plt.title(f'Distribution of {col}')
plt.tight_layout()
plt.show()

# 5. Boxplots for Numerical Features
for col in num_cols:
    plt.figure(figsize=(8,2))
    sns.boxplot(x=df[col], color="lightgreen")
    plt.title(f'Boxplot of {col}')
    plt.show()

# 6. Value Counts and Count Plots for Categorical Features
cat_cols = ['Shift', 'Machine_Type']
for col in cat_cols:
    print(f'\nValue counts for {col}:')
    print(df[col].value_counts())
    plt.figure(figsize=(6,4))
    sns.countplot(x=col, data=df, palette="pastel")
    plt.title(f'Count plot of {col}')
    plt.show()

# 7. Correlation Heatmap
plt.figure(figsize=(10,8))
corr = df[num_cols].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# 8. Scatter Plots of Key Features vs Target
for col in ['Machine_Hours', 'Material_Processed_tons', 'Temperature_C']:
    plt.figure(figsize=(6,4))
    sns.scatterplot(x=df[col], y=df['Energy_Consumption_kWh'], alpha=0.6)
    plt.title(f'{col} vs Energy Consumption')
    plt.show()

# 9. Boxplots of Energy Consumption by Categorical Features
for col in cat_cols:
    plt.figure(figsize=(8,4))
    sns.boxplot(x=df[col], y=df['Energy_Consumption_kWh'], palette="Set2")
    plt.title(f'Energy Consumption by {col}')
    plt.show()

# # 10. Time Series Plot of Energy Consumption
# if 'Timestamp' in df.columns:
#     plt.figure(figsize=(15,5))
#     plt.plot(df['Timestamp'], df['Energy_Consumption_kWh'], color="purple")
#     plt.title('Energy Consumption Over Time')
#     plt.xlabel('Timestamp')
#     plt.ylabel('Energy Consumption (kWh)')
#     plt.xticks(rotation=45)
#     plt.show()

"""En"""



